<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project basedir="." name="apache-cassandra--checkerframework">
    <property name="checkerframework.version" value="3.35.0"/>
    <property name="checkerframework.jars.dir" value="${build.dir}/checkerframework-jars"/>
    <property name="checkerframework.output.dir" value="${build.dir}/checkerframework-output"/>

    <!-- Options to be added for the processor when running with verbose output -->
    <resources id="_cf_verbose_output_args">
        <string>-Afilenames</string>
        <string>-Ashowchecks</string>
        <string>-AshowInferenceSteps</string>
        <string>-AshowWpiFailedInferences</string>
    </resources>
    <pathconvert property="_cf_verbose_output_args_line" refid="_cf_verbose_output_args" pathsep=" "/>

    <!-- Project-wide suppressed warnings -->
    <resources id="_cf_suppressed_warnings">
        <string>assignment</string>
        <string>argument</string>
        <string>type.argument</string>
        <string>return</string>
        <string>destructor.exceptional.postcondition</string>
        <string>contracts.postcondition</string>
        <string>cast.unsafe</string>
        <string>methodref.receiver</string>
    </resources>
    <pathconvert property="_cf_suppressed_warnings_line" refid="_cf_suppressed_warnings" pathsep=","/>
    <condition property="_cf_suppressed_warnings_line_cond" value="${_cf_suppressed_warnings_line}" else="">
        <isset property="cf.verbose"/>
    </condition>

    <resources id="_cf_args_j11">
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</string>
        <string>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</string>
        <string>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</string>
    </resources>
    <pathconvert property="_cf_args_line_j11" refid="_cf_args_j11" pathsep=" "/>

    <resources id="_cf_args_j17">
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED</string>
        <string>-J--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED</string>
        <string>-J--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED</string>
        <string>-J--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED</string>
    </resources>
    <pathconvert property="_cf_args_line_j17" refid="_cf_args_j17" pathsep=" "/>

    <condition property="_cf_args_line" value="${_cf_args_line_j11}" else="${_cf_args_line_j17}">
        <equals arg1="${ant.java.version}" arg2="11"/>
    </condition>

    <target name="_checkerframework">
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${checkerframework.output.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>

        <mkdir dir="${checkerframework.output.dir}"/>

        <path id="processor.classpath">
            <fileset dir="${checkerframework.jars.dir}">
                <include name="*.jar"/>
            </fileset>
        </path>

        <javac debug="false" encoding="utf-8" fork="true" memoryinitialsize="4g" memorymaximumsize="4g" includeantruntime="false"
               destdir="${checkerframework.output.dir}" source="${ant.java.version}" target="${ant.java.version}" includes="${_cf.check.only}"
               listfiles="${_cf.listfiles}">
            <src path="${build.src.java}"/>


            <!-- Bug filed to Checker Framework https://github.com/typetools/checker-framework/issues/6030 -->
            <exclude name="org/apache/cassandra/service/reads/DataResolver.java"/>
            <exclude name="org/apache/cassandra/io/sstable/format/SSTableScanner.java"/>

            <!-- Generated sources are deliberately excluded from analysis because we cannot do anything with problems
                 found there (also because they crash CheckerFramework). Therefore, the regular compilation must be run
                 before the analysis so the checker-compiler can access already compiled generated classes.  -->

            <compilerarg value="-XDignore.symbol.file"/>
            <compilerarg line="-Xmaxwarns 10000"/>
            <compilerarg line="-Xmaxerrs 10000"/>
            <compilerarg line="${jdk11plus-javac-exports}"/>

            <compilerarg line="${_cf_args_line}"/>

            <compilerarg value="-processorpath"/>
            <compilerarg pathref="processor.classpath"/>

            <compilerarg value="-processor"/>
            <compilerarg value="org.checkerframework.checker.resourceleak.ResourceLeakChecker"/>  <!-- add more checkers if needed -->

            <compilerarg value="-proc:only"/> <!-- do not compile, only run annotation processors -->

            <compilerarg value="-AshowPrefixInWarningMessages"/>
            <compilerarg value="-ApermitStaticOwning"/>
            <compilerarg value="-ApermitInitializationLeak"/>
            <compilerarg value="-AprintVerboseGenerics"/>
            <compilerarg value="-AprintAllQualifiers"/>
            <compilerarg line="-AsuppressWarnings=${_cf_suppressed_warnings_line}"/>

<!--            <compilerarg line="${_cf_verbose_output_args_line}"/>-->

            <classpath>
                <path refid="cassandra.classpath"/>
            </classpath>
        </javac>
    </target>

</project>
